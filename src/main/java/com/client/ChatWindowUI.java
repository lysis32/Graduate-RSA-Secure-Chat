package com.client;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import com.globals.Globals;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.security.rsa.RSA;
import com.security.rsa.RSAKey;
import jdk.nashorn.internal.parser.JSONParser;
import org.json.JSONObject;

import javax.swing.*;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Invocation;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.URI;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import static java.awt.SystemColor.text;

/**
 *
 * @author alec.ferguson
 */
public class ChatWindowUI extends javax.swing.JFrame {
    private String serverUri;
    private String userName;
    private Chat chat;

    /** Creates new form ChatWindowUI
     *
     * @param userName
     * @param serverUri
     * @param rsa
     * @param rsakey
     */
    public ChatWindowUI(String userName,
                        String serverUri,
                        RSA rsa,
                        RSAKey rsakey)
    {
        this.serverUri = serverUri;
        this.userName = userName;
        initComponents();

        try
        {
            chat = new Chat(
                    this.userName,
                    new URI(this.serverUri + Globals.WS_PATH),
                    rsa,
                    rsakey);
        } catch(Exception e){
            e.printStackTrace();
        }
        ScheduledExecutorService executor =
                Executors.newScheduledThreadPool(10);
        executor.scheduleAtFixedRate(new messageReader(), 0, 100, TimeUnit.MILLISECONDS);
    }

    /** Thread for reading messages
     *
     */
    public class messageReader implements Runnable {
        @Override
        public void run() {
            chat.readMessages();

            // Users leaving is not yet implemented
            for(String user: chat.getConnectedUsersMap().keySet()) {
                // Not very efficient, but it works for now.
                if(!activeUserListModel.contains(user)) {
                    activeUserListModel.addElement(user);
                }
            }
            // Also update the chat log after reading messages
            if (!activeUserList.isSelectionEmpty()) {
                chatTextArea.setText(chat.getConnectedUsersMap().
                        get(activeUserList.getSelectedValue()).
                        getChatHistory());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        setTitle("Let's Chat");
        chatTextAreaScrollPane = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();
        userListLabel = new javax.swing.JLabel();
        activeUserLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        inputTextAreaScrollPane = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        enterButton = new javax.swing.JButton();
        activeUserListScrollPane = new javax.swing.JScrollPane();
        activeUserListModel = new DefaultListModel();
        activeUserList = new javax.swing.JList(activeUserListModel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chatTextArea.setEditable(false);
        chatTextArea.setColumns(20);
        chatTextArea.setLineWrap(true);
        chatTextArea.setRows(5);
        chatTextArea.setText("");
        chatTextAreaScrollPane.setViewportView(chatTextArea);

        userListLabel.setText("Users");

        activeUserLabel.setText("Logged in as");

        usernameTextField.setEditable(false);
        usernameTextField.setToolTipText("");
        usernameTextField.setText(this.userName);

        inputTextArea.setColumns(20);
        inputTextArea.setLineWrap(true);
        inputTextArea.setRows(5);
        inputTextAreaScrollPane.setViewportView(inputTextArea);

        enterButton.setText("Enter");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        activeUserList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        activeUserList.setToolTipText("");
        activeUserList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                activeUserListValueChanged(evt);
            }
        });
        activeUserListScrollPane.setViewportView(activeUserList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(chatTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(activeUserLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(inputTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(enterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(userListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(activeUserListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(userListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(activeUserLabel)
                                        .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(chatTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(inputTextAreaScrollPane)
                                                        .addComponent(enterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addComponent(activeUserListScrollPane))
                                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    /** Update the chat box to include a new message from us:
     *    ex. username: hello
     *  Then send a message over the socket to the target user via
     *  the chat.
     *
     * @param evt
     */
    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (inputTextArea.getText() != ""){
            if (activeUserList.isSelectionEmpty()) {
                // Display a prompt
                chatTextArea.setText("Please select a user to chat with.");
            } else {
                // Update the chat history for this user
                String targetUser = activeUserList.getSelectedValue();
                ChatUser user = chat.getConnectedUsersMap().get(targetUser);

                // Build the new message
                String newMessage = (this.userName +
                        ": " +
                        inputTextArea.getText());

                // Update the chat history with this user to include the message
                user.setChatHistory(user.getChatHistory() + newMessage + "\n");

                // Send message over socket
                chat.sendChatMessage(inputTextArea.getText(), targetUser);

                // Show the text
                chatTextArea.setText(user.getChatHistory());
                // Clear the input text area
                inputTextArea.setText("");
            }
        }
    }

    /** Handle selection changes in the user list.
     *
     * @param evt
     */
    private void activeUserListValueChanged(javax.swing.event.ListSelectionEvent evt)
    {
        if (activeUserList.isSelectionEmpty())
        {
            chatTextArea.setText("Please select a user to chat with.");
        } else {
            chatTextArea.setText(
                    chat.getConnectedUsersMap().
                    get(activeUserList.getSelectedValue()).getChatHistory());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatWindowUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatWindowUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatWindowUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatWindowUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RSAKey testkey = new RSAKey();
                testkey.GenerateKeys();

                RSA testRSA = new RSA(testkey);

                new ChatWindowUI(
                        args[0],
                        "http://127.0.0.1:4000",
                        testRSA,
                        testkey).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel activeUserLabel;
    private javax.swing.JList<String> activeUserList;
    private javax.swing.DefaultListModel activeUserListModel;
    private javax.swing.JScrollPane activeUserListScrollPane;
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JScrollPane chatTextAreaScrollPane;
    private javax.swing.JButton enterButton;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JScrollPane inputTextAreaScrollPane;
    private javax.swing.JLabel userListLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration
}
